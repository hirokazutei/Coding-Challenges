# 12. Highly Divisible Triangular Number

"""
The sequence of triangle numbers is generated by adding the natural numbers.

So the 7th triangle number would be:
 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.

The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
36: 1,2,3,4,6,9,12,18,36
45: 1,3,5,9,15,45
55, 1,5,11,55
66: 1,2,3,6,11,22,33
78: 1,2,3,6,13,26,39,78
91: 1,7,13,91
105: 1,3,5,7,15,21,35,106
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""
from _timeit import timeit

# Brainstorm
"""
The brute force method is to continuously iterate through the triangle numbers and count the number of divisors.
However, we can save computational process by storing the number of divisors for each number we encounter.
"""

@timeit
def TriangleNumberDivisor(divisor):
    count = 1
    triangle_num = 1
    num_divisors = [0, 0, 0, 0]
    divisor_len = 2
    primes = [2, 3]
    found = False
    while (not found):
        count += 1
        triangle_num += count
        triangle_sqr = int(triangle_num**(1/2))
        while divisor_len < triangle_num + 1:
            num_divisors.append(-1)
            divisor_len += 1
        candidate = primes[-1]
        while primes[-1]**2 < triangle_num:
            candidate += 2
            if IsPrime(candidate, primes):
                primes.append(candidate)
                num_divisors[candidate] = 0


        divisors = 0
        if not IsPrime(triangle_sqr, primes) and triangle_sqr**2 == triangle_num:
            divisors += 1
        for prime in primes: # Must be divided by primes
            if prime > triangle_num:
                break
            n = 1
            while prime**n <= triangle_sqr:
                if triangle_num % prime**n == 0:
                    if triangle_num // prime == prime:
                        divisors += 1
                    else:
                        divisors += 1
                        if IsPrime(triangle_num//prime, primes):
                            divisors += 1
                        else:
                            divisors += CheckDivisors(primes, num_divisors, triangle_num//prime)
                n += 1
        if divisors + 2 >= divisor:
            #print(num_divisors)
            return triangle_num
        num_divisors[triangle_num] = divisors

        print(triangle_num, divisors + 2)

def CheckDivisors(primes, num_divisors, i):
    if IsPrime(i, primes):
        return 0
    else:
        i_sqr = int(i**(1/2))
        divisors = 0
        for prime in primes: # Must be divided by primes
            if prime > i_sqr:
                break
                n = 1
                while prime ** n <= i_sqr:
                    if i % prime**n == 0:
                        if i // prime**n == prime**n:
                            divisors += 1
                        else:
                            divisors += 1
                            divisors += CheckDivisors(primes, num_divisors, i//prime)
                    n += 1
        num_divisors[i] = divisors
    return divisors


def IsPrime(candidate, primes):
    sqrt = candidate**(1/2)
    for item in primes:
        if candidate % item == 0:
            return False
        elif item > sqrt:
            return True
    return True

print(TriangleNumberDivisor(50))